-- Basic Framework Plugin
-- by QSC
-- October 2020

-- Information block for the plugin
PluginInfo = {
  Name = "Dropdown Selector",
  Version = "1.0.0",
  BuildVersion = "0.0.0.79",
  Id = "fb574331-5b35-400e-9c36-9eb746f8c86d",
  Author = "Andrew Laiacano",
  Description = "Dropdown selector for source routing. This plugin is meant to connect to a control router"  
}

DGI_Logo = "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"

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 102, 102, 102 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "Dropdown Selector, version " .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = { "Control" }  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
  if props.Model ~= nil and props.Model.Value ~= "" then
    table.insert(model, { props.Model.Value } )
  else
    table.insert(model, { "Base Model" } )
  end
 return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  
  
  table.insert(props ,{
    Name = "SelectionAmount", 
    Type = "integer", 
    Min = 1, 
    Max = 100, 
    Value = 4
  })
  table.insert(props, {
  Name = "DefaultSelection",
  Type = "integer",
  Min = 0,
  Max = 100,
  Value = 1
  })
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  -- table.insert(pins,{
  --   Name = "Audio Output",
  --   Direction = "output",
  -- })
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  -- table.insert(components,{
  --   Name = "main_mixer",
  --   Type = "mixer",
  --   Properties =   
  --   {
  --     ["n_inputs"] = 8,
  --     ["n_outputs"] = 1,
  --   }
  -- })
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  -- table.insert( wiring, { "Audio Output", "main_mixer Output 1" } )
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  local NumOfSelections = props.SelectionAmount.Value
  local DefaultSelection = props.DefaultSelection.Value
  
  
  table.insert(ctrls, {
  Name = "Selector",
  Count = 1,
  ControlType = "Text",
  })
  
  table.insert(ctrls, {
  Name = "SelectorValue",
  Count = 1,
  ControlType = "Knob",
  ControlUnit = "Integer",
  Min = 0,
  Max = 254,
  UserPin = true,
  PinStyle = "Output"
  })
  
  table.insert(ctrls, {
  Name = "SelectorText",
  Count = 1, 
  ControlType = "Text",
  UserPin = true,
  PinStyle = "Output"
  })
  
  for i = 1, NumOfSelections do
    table.insert(ctrls, {
    Name = "Selection" .. i,
    Count = 1,
    ControlType = "Button",
    ButtonType = "Momentary",
    UserPin = true,
    PinStyle = "Both"
    })
  
    table.insert(ctrls, {
    Name = "SelectionName" .. i,
    Count = 1,
    ControlType = "Text",
    })
  end
  
  
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local NumOfSelections = props.SelectionAmount.Value
  local btnHeight = 30
  local btnWidth  = 50
  local textWidth = 200
  local setupVPos = 180
  
  
  local CurrentPage = PageNames[props["page_index"].Value]
  if CurrentPage == "Control" then
  
    table.insert(graphics, {
      Type = "Image",
      Image = DGI_Logo,
      Position = {0,0},
      Size = {160, 30}
    })
  
  
    -- Status ----------------------------------------------------------------------------------------
    table.insert(graphics, {
      Type = "Header",
      Text = "Status",
      Size = {300,20},
      Position = {0,40}
    })
  
    layout["SelectorValue"] = {
    PrettyName = "SelectorValue",
    Style = "text",
    Position = {240,65},
    Size = {50,btnHeight},
    IsReadOnly = true,
    }
  
    layout["SelectorText"] = {
    PrettyName = "SelectorText",
    Style = "Text",
    Position = {30,65},
    Size = {200, btnHeight},
    IsReadOnly = true
    }
  
  -- Dropdown list ------------------------------------------------------------------------------------
  
    layout["Selector"] = {
      PrettyName = "Selector",
      Style = "ComboBox",
      Position = {30,145},
      Size = {textWidth,btnHeight},
    }
  
  -- Setup ---------------------------------------------------------------------------------------------
    table.insert(graphics, {
      Type = "GroupBox",
      Text = "Dropdown",
      Size = {300,(NumOfSelections * btnHeight) + 120},
      StrokeWidth = 1,
      Position = {0,110},
      HTextAlign = "Left",
      CornerRadius = 8,
      Zorder = -1
    })
  
    for i = 1, NumOfSelections do
      table.insert(graphics, {
        Type = "Text",
        Text = tostring(i)..".",
        Size = {20,30},
        Position = {1, (btnHeight * i) + setupVPos},
      })
  
  
      layout["SelectionName" .. i] = {
      PrettyName = "SelectionName" .. i,
      Style = "Text",
      Position = {30,(btnHeight * i) + setupVPos},
      Size = {200, btnHeight},
      }
  
      layout["Selection" .. i] = {
      PrettyName = "Selection" .. i,
      Style = "Button",
      Position = {240,(btnHeight * i) + setupVPos},
      Size = {btnWidth, btnHeight},
      }
    end
  
  end
  return layout, graphics
end

--Start event based logic
if Controls then
  local NumOfSelections = Properties["SelectionAmount"].Value
  local defaultSelection = Properties["DefaultSelection"]
  local outputList = {}
  
  
  
  -- Functions
  function ProcessZone()
    print("NumOfSelection = ", NumOfSelections)
    for i = 1, NumOfSelections do
      if Controls.Selector.String == outputList[i] then
        Controls["Selection" .. i].Boolean = true
        Controls.SelectorValue.Value = i
        Controls.SelectorText.String  = Controls.Selector.String
      else
        Controls["Selection" .. i].Boolean = false
      end
    end
  end
  
  function LoadOutputList() 
    outputList = {}
    for i = 1, NumOfSelections do
      table.insert(outputList, Controls["SelectionName"..i].String)
    end
    Controls.Selector.Choices = outputList
  end
  
  
  -- EventHandlers
  for i = 1, NumOfSelections do
    Controls["SelectionName" .. i].EventHandler = function()
      outputList[i] = Controls["SelectionName" .. i].String
      Controls.Selector.Choices = outputList
    end
  end
  
  Controls.Selector.EventHandler = function()
    ProcessZone()
  end
  
  for i = 1, NumOfSelections do
    Controls["Selection" .. i].EventHandler = function()
      Controls.Selector.String = outputList[i]
      ProcessZone()
    end
  end
  
  
  -- init
  for i = 1, NumOfSelections do
    if Controls["SelectionName"..i].String == "" then
      Controls["SelectionName"..i].String = i
    end
  end
  LoadOutputList()
  Controls.Selector.String = outputList[defaultSelection.Value]
  ProcessZone()
end
